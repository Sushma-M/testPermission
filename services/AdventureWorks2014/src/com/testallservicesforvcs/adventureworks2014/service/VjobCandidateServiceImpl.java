/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.VjobCandidate;
import com.testallservicesforvcs.adventureworks2014.VjobCandidateId;


/**
 * ServiceImpl object for domain model class VjobCandidate.
 *
 * @see VjobCandidate
 */
@Service("AdventureWorks2014.VjobCandidateService")
@Validated
public class VjobCandidateServiceImpl implements VjobCandidateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VjobCandidateServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.VjobCandidateDao")
    private WMGenericDao<VjobCandidate, VjobCandidateId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VjobCandidate, VjobCandidateId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidate create(VjobCandidate vjobCandidate) {
        LOGGER.debug("Creating a new VjobCandidate with information: {}", vjobCandidate);

        VjobCandidate vjobCandidateCreated = this.wmGenericDao.create(vjobCandidate);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vjobCandidateCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidate getById(VjobCandidateId vjobcandidateId) {
        LOGGER.debug("Finding VjobCandidate by id: {}", vjobcandidateId);
        return this.wmGenericDao.findById(vjobcandidateId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidate findById(VjobCandidateId vjobcandidateId) {
        LOGGER.debug("Finding VjobCandidate by id: {}", vjobcandidateId);
        try {
            return this.wmGenericDao.findById(vjobcandidateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VjobCandidate found with id: {}", vjobcandidateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<VjobCandidate> findByMultipleIds(List<VjobCandidateId> vjobcandidateIds, boolean orderedReturn) {
        LOGGER.debug("Finding VjobCandidates by ids: {}", vjobcandidateIds);

        return this.wmGenericDao.findByMultipleIds(vjobcandidateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidate update(VjobCandidate vjobCandidate) {
        LOGGER.debug("Updating VjobCandidate with information: {}", vjobCandidate);

        this.wmGenericDao.update(vjobCandidate);
        this.wmGenericDao.refresh(vjobCandidate);

        return vjobCandidate;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidate delete(VjobCandidateId vjobcandidateId) {
        LOGGER.debug("Deleting VjobCandidate with id: {}", vjobcandidateId);
        VjobCandidate deleted = this.wmGenericDao.findById(vjobcandidateId);
        if (deleted == null) {
            LOGGER.debug("No VjobCandidate found with id: {}", vjobcandidateId);
            throw new EntityNotFoundException(String.valueOf(vjobcandidateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(VjobCandidate vjobCandidate) {
        LOGGER.debug("Deleting VjobCandidate with {}", vjobCandidate);
        this.wmGenericDao.delete(vjobCandidate);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidate to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}