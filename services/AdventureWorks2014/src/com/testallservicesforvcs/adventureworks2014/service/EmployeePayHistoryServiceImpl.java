/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.EmployeePayHistory;
import com.testallservicesforvcs.adventureworks2014.EmployeePayHistoryId;


/**
 * ServiceImpl object for domain model class EmployeePayHistory.
 *
 * @see EmployeePayHistory
 */
@Service("AdventureWorks2014.EmployeePayHistoryService")
@Validated
public class EmployeePayHistoryServiceImpl implements EmployeePayHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePayHistoryServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.EmployeePayHistoryDao")
    private WMGenericDao<EmployeePayHistory, EmployeePayHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeePayHistory, EmployeePayHistoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory create(EmployeePayHistory employeePayHistory) {
        LOGGER.debug("Creating a new EmployeePayHistory with information: {}", employeePayHistory);

        EmployeePayHistory employeePayHistoryCreated = this.wmGenericDao.create(employeePayHistory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeePayHistoryCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory getById(EmployeePayHistoryId employeepayhistoryId) {
        LOGGER.debug("Finding EmployeePayHistory by id: {}", employeepayhistoryId);
        return this.wmGenericDao.findById(employeepayhistoryId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory findById(EmployeePayHistoryId employeepayhistoryId) {
        LOGGER.debug("Finding EmployeePayHistory by id: {}", employeepayhistoryId);
        try {
            return this.wmGenericDao.findById(employeepayhistoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmployeePayHistory found with id: {}", employeepayhistoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<EmployeePayHistory> findByMultipleIds(List<EmployeePayHistoryId> employeepayhistoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmployeePayHistories by ids: {}", employeepayhistoryIds);

        return this.wmGenericDao.findByMultipleIds(employeepayhistoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory update(EmployeePayHistory employeePayHistory) {
        LOGGER.debug("Updating EmployeePayHistory with information: {}", employeePayHistory);

        this.wmGenericDao.update(employeePayHistory);
        this.wmGenericDao.refresh(employeePayHistory);

        return employeePayHistory;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory delete(EmployeePayHistoryId employeepayhistoryId) {
        LOGGER.debug("Deleting EmployeePayHistory with id: {}", employeepayhistoryId);
        EmployeePayHistory deleted = this.wmGenericDao.findById(employeepayhistoryId);
        if (deleted == null) {
            LOGGER.debug("No EmployeePayHistory found with id: {}", employeepayhistoryId);
            throw new EntityNotFoundException(String.valueOf(employeepayhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(EmployeePayHistory employeePayHistory) {
        LOGGER.debug("Deleting EmployeePayHistory with {}", employeePayHistory);
        this.wmGenericDao.delete(employeePayHistory);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<EmployeePayHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeePayHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<EmployeePayHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeePayHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table EmployeePayHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table EmployeePayHistory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}