/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.VemployeeDepartmentHistory;
import com.testallservicesforvcs.adventureworks2014.VemployeeDepartmentHistoryId;


/**
 * ServiceImpl object for domain model class VemployeeDepartmentHistory.
 *
 * @see VemployeeDepartmentHistory
 */
@Service("AdventureWorks2014.VemployeeDepartmentHistoryService")
@Validated
public class VemployeeDepartmentHistoryServiceImpl implements VemployeeDepartmentHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemployeeDepartmentHistoryServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.VemployeeDepartmentHistoryDao")
    private WMGenericDao<VemployeeDepartmentHistory, VemployeeDepartmentHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VemployeeDepartmentHistory, VemployeeDepartmentHistoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VemployeeDepartmentHistory create(VemployeeDepartmentHistory vemployeeDepartmentHistory) {
        LOGGER.debug("Creating a new VemployeeDepartmentHistory with information: {}", vemployeeDepartmentHistory);

        VemployeeDepartmentHistory vemployeeDepartmentHistoryCreated = this.wmGenericDao.create(vemployeeDepartmentHistory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vemployeeDepartmentHistoryCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VemployeeDepartmentHistory getById(VemployeeDepartmentHistoryId vemployeedepartmenthistoryId) {
        LOGGER.debug("Finding VemployeeDepartmentHistory by id: {}", vemployeedepartmenthistoryId);
        return this.wmGenericDao.findById(vemployeedepartmenthistoryId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VemployeeDepartmentHistory findById(VemployeeDepartmentHistoryId vemployeedepartmenthistoryId) {
        LOGGER.debug("Finding VemployeeDepartmentHistory by id: {}", vemployeedepartmenthistoryId);
        try {
            return this.wmGenericDao.findById(vemployeedepartmenthistoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VemployeeDepartmentHistory found with id: {}", vemployeedepartmenthistoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<VemployeeDepartmentHistory> findByMultipleIds(List<VemployeeDepartmentHistoryId> vemployeedepartmenthistoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding VemployeeDepartmentHistories by ids: {}", vemployeedepartmenthistoryIds);

        return this.wmGenericDao.findByMultipleIds(vemployeedepartmenthistoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public VemployeeDepartmentHistory update(VemployeeDepartmentHistory vemployeeDepartmentHistory) {
        LOGGER.debug("Updating VemployeeDepartmentHistory with information: {}", vemployeeDepartmentHistory);

        this.wmGenericDao.update(vemployeeDepartmentHistory);
        this.wmGenericDao.refresh(vemployeeDepartmentHistory);

        return vemployeeDepartmentHistory;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VemployeeDepartmentHistory delete(VemployeeDepartmentHistoryId vemployeedepartmenthistoryId) {
        LOGGER.debug("Deleting VemployeeDepartmentHistory with id: {}", vemployeedepartmenthistoryId);
        VemployeeDepartmentHistory deleted = this.wmGenericDao.findById(vemployeedepartmenthistoryId);
        if (deleted == null) {
            LOGGER.debug("No VemployeeDepartmentHistory found with id: {}", vemployeedepartmenthistoryId);
            throw new EntityNotFoundException(String.valueOf(vemployeedepartmenthistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(VemployeeDepartmentHistory vemployeeDepartmentHistory) {
        LOGGER.debug("Deleting VemployeeDepartmentHistory with {}", vemployeeDepartmentHistory);
        this.wmGenericDao.delete(vemployeeDepartmentHistory);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VemployeeDepartmentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VemployeeDepartmentHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VemployeeDepartmentHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VemployeeDepartmentHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VemployeeDepartmentHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VemployeeDepartmentHistory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}