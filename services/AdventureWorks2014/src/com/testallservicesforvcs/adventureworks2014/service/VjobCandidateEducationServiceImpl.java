/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.VjobCandidateEducation;
import com.testallservicesforvcs.adventureworks2014.VjobCandidateEducationId;


/**
 * ServiceImpl object for domain model class VjobCandidateEducation.
 *
 * @see VjobCandidateEducation
 */
@Service("AdventureWorks2014.VjobCandidateEducationService")
@Validated
public class VjobCandidateEducationServiceImpl implements VjobCandidateEducationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VjobCandidateEducationServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.VjobCandidateEducationDao")
    private WMGenericDao<VjobCandidateEducation, VjobCandidateEducationId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VjobCandidateEducation, VjobCandidateEducationId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEducation create(VjobCandidateEducation vjobCandidateEducation) {
        LOGGER.debug("Creating a new VjobCandidateEducation with information: {}", vjobCandidateEducation);

        VjobCandidateEducation vjobCandidateEducationCreated = this.wmGenericDao.create(vjobCandidateEducation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vjobCandidateEducationCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEducation getById(VjobCandidateEducationId vjobcandidateeducationId) {
        LOGGER.debug("Finding VjobCandidateEducation by id: {}", vjobcandidateeducationId);
        return this.wmGenericDao.findById(vjobcandidateeducationId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEducation findById(VjobCandidateEducationId vjobcandidateeducationId) {
        LOGGER.debug("Finding VjobCandidateEducation by id: {}", vjobcandidateeducationId);
        try {
            return this.wmGenericDao.findById(vjobcandidateeducationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VjobCandidateEducation found with id: {}", vjobcandidateeducationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<VjobCandidateEducation> findByMultipleIds(List<VjobCandidateEducationId> vjobcandidateeducationIds, boolean orderedReturn) {
        LOGGER.debug("Finding VjobCandidateEducations by ids: {}", vjobcandidateeducationIds);

        return this.wmGenericDao.findByMultipleIds(vjobcandidateeducationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEducation update(VjobCandidateEducation vjobCandidateEducation) {
        LOGGER.debug("Updating VjobCandidateEducation with information: {}", vjobCandidateEducation);

        this.wmGenericDao.update(vjobCandidateEducation);
        this.wmGenericDao.refresh(vjobCandidateEducation);

        return vjobCandidateEducation;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEducation delete(VjobCandidateEducationId vjobcandidateeducationId) {
        LOGGER.debug("Deleting VjobCandidateEducation with id: {}", vjobcandidateeducationId);
        VjobCandidateEducation deleted = this.wmGenericDao.findById(vjobcandidateeducationId);
        if (deleted == null) {
            LOGGER.debug("No VjobCandidateEducation found with id: {}", vjobcandidateeducationId);
            throw new EntityNotFoundException(String.valueOf(vjobcandidateeducationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(VjobCandidateEducation vjobCandidateEducation) {
        LOGGER.debug("Deleting VjobCandidateEducation with {}", vjobCandidateEducation);
        this.wmGenericDao.delete(vjobCandidateEducation);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidateEducation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidateEducations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidateEducation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidateEducations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidateEducation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidateEducation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}