/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.VjobCandidateEmployment;
import com.testallservicesforvcs.adventureworks2014.VjobCandidateEmploymentId;


/**
 * ServiceImpl object for domain model class VjobCandidateEmployment.
 *
 * @see VjobCandidateEmployment
 */
@Service("AdventureWorks2014.VjobCandidateEmploymentService")
@Validated
public class VjobCandidateEmploymentServiceImpl implements VjobCandidateEmploymentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VjobCandidateEmploymentServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.VjobCandidateEmploymentDao")
    private WMGenericDao<VjobCandidateEmployment, VjobCandidateEmploymentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VjobCandidateEmployment, VjobCandidateEmploymentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEmployment create(VjobCandidateEmployment vjobCandidateEmployment) {
        LOGGER.debug("Creating a new VjobCandidateEmployment with information: {}", vjobCandidateEmployment);

        VjobCandidateEmployment vjobCandidateEmploymentCreated = this.wmGenericDao.create(vjobCandidateEmployment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vjobCandidateEmploymentCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEmployment getById(VjobCandidateEmploymentId vjobcandidateemploymentId) {
        LOGGER.debug("Finding VjobCandidateEmployment by id: {}", vjobcandidateemploymentId);
        return this.wmGenericDao.findById(vjobcandidateemploymentId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEmployment findById(VjobCandidateEmploymentId vjobcandidateemploymentId) {
        LOGGER.debug("Finding VjobCandidateEmployment by id: {}", vjobcandidateemploymentId);
        try {
            return this.wmGenericDao.findById(vjobcandidateemploymentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VjobCandidateEmployment found with id: {}", vjobcandidateemploymentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<VjobCandidateEmployment> findByMultipleIds(List<VjobCandidateEmploymentId> vjobcandidateemploymentIds, boolean orderedReturn) {
        LOGGER.debug("Finding VjobCandidateEmployments by ids: {}", vjobcandidateemploymentIds);

        return this.wmGenericDao.findByMultipleIds(vjobcandidateemploymentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEmployment update(VjobCandidateEmployment vjobCandidateEmployment) {
        LOGGER.debug("Updating VjobCandidateEmployment with information: {}", vjobCandidateEmployment);

        this.wmGenericDao.update(vjobCandidateEmployment);
        this.wmGenericDao.refresh(vjobCandidateEmployment);

        return vjobCandidateEmployment;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public VjobCandidateEmployment delete(VjobCandidateEmploymentId vjobcandidateemploymentId) {
        LOGGER.debug("Deleting VjobCandidateEmployment with id: {}", vjobcandidateemploymentId);
        VjobCandidateEmployment deleted = this.wmGenericDao.findById(vjobcandidateemploymentId);
        if (deleted == null) {
            LOGGER.debug("No VjobCandidateEmployment found with id: {}", vjobcandidateemploymentId);
            throw new EntityNotFoundException(String.valueOf(vjobcandidateemploymentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(VjobCandidateEmployment vjobCandidateEmployment) {
        LOGGER.debug("Deleting VjobCandidateEmployment with {}", vjobCandidateEmployment);
        this.wmGenericDao.delete(vjobCandidateEmployment);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidateEmployment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidateEmployments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<VjobCandidateEmployment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VjobCandidateEmployments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidateEmployment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table VjobCandidateEmployment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}