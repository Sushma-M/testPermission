/*Copyright (c) 2016-2017 vcstest4.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest4.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest4.com*/
package com.testallservicesforvcs.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testallservicesforvcs.adventureworks2014.JobCandidate;


/**
 * ServiceImpl object for domain model class JobCandidate.
 *
 * @see JobCandidate
 */
@Service("AdventureWorks2014.JobCandidateService")
@Validated
public class JobCandidateServiceImpl implements JobCandidateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobCandidateServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.JobCandidateDao")
    private WMGenericDao<JobCandidate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JobCandidate, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate create(JobCandidate jobCandidate) {
        LOGGER.debug("Creating a new JobCandidate with information: {}", jobCandidate);

        JobCandidate jobCandidateCreated = this.wmGenericDao.create(jobCandidate);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(jobCandidateCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate getById(Integer jobcandidateId) {
        LOGGER.debug("Finding JobCandidate by id: {}", jobcandidateId);
        return this.wmGenericDao.findById(jobcandidateId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate findById(Integer jobcandidateId) {
        LOGGER.debug("Finding JobCandidate by id: {}", jobcandidateId);
        try {
            return this.wmGenericDao.findById(jobcandidateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No JobCandidate found with id: {}", jobcandidateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<JobCandidate> findByMultipleIds(List<Integer> jobcandidateIds, boolean orderedReturn) {
        LOGGER.debug("Finding JobCandidates by ids: {}", jobcandidateIds);

        return this.wmGenericDao.findByMultipleIds(jobcandidateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate update(JobCandidate jobCandidate) {
        LOGGER.debug("Updating JobCandidate with information: {}", jobCandidate);

        this.wmGenericDao.update(jobCandidate);
        this.wmGenericDao.refresh(jobCandidate);

        return jobCandidate;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate delete(Integer jobcandidateId) {
        LOGGER.debug("Deleting JobCandidate with id: {}", jobcandidateId);
        JobCandidate deleted = this.wmGenericDao.findById(jobcandidateId);
        if (deleted == null) {
            LOGGER.debug("No JobCandidate found with id: {}", jobcandidateId);
            throw new EntityNotFoundException(String.valueOf(jobcandidateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(JobCandidate jobCandidate) {
        LOGGER.debug("Deleting JobCandidate with {}", jobCandidate);
        this.wmGenericDao.delete(jobCandidate);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<JobCandidate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JobCandidates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<JobCandidate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JobCandidates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table JobCandidate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table JobCandidate to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}